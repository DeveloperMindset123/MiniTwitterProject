import { MongoClient } from 'mongodb';
import fs from 'fs';
const USERS = 'userData';
const DBNAME = 'deadBird';
const POSTS = 'posts';

export function mongoUri(){
    const filePath = 'mongoUri.json';
    try {
        const jsonContent = fs.readFileSync(filePath, 'utf8');
        const config = JSON.parse(jsonContent);

        return config.uri;
    } catch (err) {
        console.error('Error reading or parsing the JSON file:', err);
    }
}
export class User{ // userId generated by `_id` by mongoDb
    constructor(admin, corpo, trendy, normal, userName, picture, bio){
        this.admin = admin;
        this.corpo = corpo;
        this.trendy = trendy;
        this.normal = normal;
        this.userName = userName;
        this.cash = 0;
        this.picture = picture;
        this.bio = bio;
    }
    copyFrom(otherItem) {
        return new User(
        otherItem.admin,
        otherItem.corpo,
        otherItem.trendy,
        otherItem.normal,
        otherItem.cash,
        otherItem.picture,
        otherItem.bio
        );
    }
}
export async function CreateUser(newUser){ // assuming proper filtering for unique name has been performed
    if(newUser.admin === false & newUser.corpo === false & newUser.trendy === false & newUser.normal === false){
        console.error('Invalid User Type: they have to have some type of permission!');
        return;
    }
    if(newUser.userName == null){
        console.error('Invalid UserName: user has no name!');
        return;
    }
    try {
        const client = new MongoClient(mongoUri(), { useUnifiedTopology: true });
        await client.connect();

        const db = client.db(DBNAME);
        const collection = db.collection(USERS);

        await collection.insertOne(newUser);

        await client.close();
    } catch (err) {
        console.error('Error saving new user:', err);
    }
    console.log("User Registered!");
    return null;
}
export async function GetUser(userName){
    try {
        const client = new MongoClient(mongoUri(), { useUnifiedTopology: true });
        await client.connect();

        const db = client.db(DBNAME);
        const collection = db.collection(USERS);

        const query = { userName: userName };
        const user = await collection.findOne(query);

        if (!user) {
            console.error('User not found!');
            return;
        }

        await client.close();
        return user;
    }catch(err){
        console.error('Error fetching user ${userName}' + err);
        return;
    }
}
export async function GetUserPosts(userName){
    try {
        const client = new MongoClient(mongoUri(), { useUnifiedTopology: true });
        await client.connect();

        // first get the user's unique ID
        const db = client.db(DBNAME);
        let collection = db.collection(USERS);

        let query = { userName: userName };
        const user = await collection.findOne(query);

        if (!user) {
            console.error('User not found!');
            return;
        }

        const userId = user._id; // gucci

        collection = db.collection(POSTS);
        query = { userId: userId};
        const cursor = collection.find(query);
        const posts = await cursor.toArray();

        if (posts.length > 0) {
            console.log('Posts found');
        } else {
            console.log('No posts found for this user');
        }


        await client.close();
        return posts;
    }catch(err){
        console.error('Error fetching user ${userName}' + err);
        return;
    }
}
export function ChangeMoney(amount, type){
    // change money by amount
    return null;
}

'Usage examples:'
// CreateUser(new User(true, false, false, false, 'LordFarquaad'));
// console.log(await GetUser('LordFarquaad'));
// console.log(await GetUserPosts('LordFarquaad'));